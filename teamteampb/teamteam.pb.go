// Code generated by protoc-gen-go. DO NOT EDIT.
// source: teamteam.proto

package teamteampb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_teamteam_c6fbd77f9329f74d, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GetRoundRequest struct {
	Round                int32    `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Player               string   `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundRequest) Reset()         { *m = GetRoundRequest{} }
func (m *GetRoundRequest) String() string { return proto.CompactTextString(m) }
func (*GetRoundRequest) ProtoMessage()    {}
func (*GetRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_teamteam_c6fbd77f9329f74d, []int{1}
}
func (m *GetRoundRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundRequest.Unmarshal(m, b)
}
func (m *GetRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundRequest.Marshal(b, m, deterministic)
}
func (dst *GetRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundRequest.Merge(dst, src)
}
func (m *GetRoundRequest) XXX_Size() int {
	return xxx_messageInfo_GetRoundRequest.Size(m)
}
func (m *GetRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundRequest proto.InternalMessageInfo

func (m *GetRoundRequest) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GetRoundRequest) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

type GetRoundResponse struct {
	PlayerRank           int32    `protobuf:"varint,1,opt,name=player_rank,json=playerRank,proto3" json:"player_rank,omitempty"`
	MyPart               int32    `protobuf:"varint,2,opt,name=my_part,json=myPart,proto3" json:"my_part,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundResponse) Reset()         { *m = GetRoundResponse{} }
func (m *GetRoundResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoundResponse) ProtoMessage()    {}
func (*GetRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_teamteam_c6fbd77f9329f74d, []int{2}
}
func (m *GetRoundResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundResponse.Unmarshal(m, b)
}
func (m *GetRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundResponse.Marshal(b, m, deterministic)
}
func (dst *GetRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundResponse.Merge(dst, src)
}
func (m *GetRoundResponse) XXX_Size() int {
	return xxx_messageInfo_GetRoundResponse.Size(m)
}
func (m *GetRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundResponse proto.InternalMessageInfo

func (m *GetRoundResponse) GetPlayerRank() int32 {
	if m != nil {
		return m.PlayerRank
	}
	return 0
}

func (m *GetRoundResponse) GetMyPart() int32 {
	if m != nil {
		return m.MyPart
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "teamteampb.Empty")
	proto.RegisterType((*GetRoundRequest)(nil), "teamteampb.GetRoundRequest")
	proto.RegisterType((*GetRoundResponse)(nil), "teamteampb.GetRoundResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeamTeamClient is the client API for TeamTeam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamTeamClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (TeamTeam_StreamClient, error)
	GetRound(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*GetRoundResponse, error)
}

type teamTeamClient struct {
	cc *grpc.ClientConn
}

func NewTeamTeamClient(cc *grpc.ClientConn) TeamTeamClient {
	return &teamTeamClient{cc}
}

func (c *teamTeamClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/teamteampb.TeamTeam/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamTeamClient) Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (TeamTeam_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamTeam_serviceDesc.Streams[0], "/teamteampb.TeamTeam/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamTeamStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TeamTeam_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type teamTeamStreamClient struct {
	grpc.ClientStream
}

func (x *teamTeamStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamTeamClient) GetRound(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*GetRoundResponse, error) {
	out := new(GetRoundResponse)
	err := c.cc.Invoke(ctx, "/teamteampb.TeamTeam/GetRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamTeamServer is the server API for TeamTeam service.
type TeamTeamServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Stream(*reflexpb.StreamRequest, TeamTeam_StreamServer) error
	GetRound(context.Context, *GetRoundRequest) (*GetRoundResponse, error)
}

func RegisterTeamTeamServer(s *grpc.Server, srv TeamTeamServer) {
	s.RegisterService(&_TeamTeam_serviceDesc, srv)
}

func _TeamTeam_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTeamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teamteampb.TeamTeam/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTeamServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamTeam_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TeamTeamServer).Stream(m, &teamTeamStreamServer{stream})
}

type TeamTeam_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type teamTeamStreamServer struct {
	grpc.ServerStream
}

func (x *teamTeamStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _TeamTeam_GetRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamTeamServer).GetRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teamteampb.TeamTeam/GetRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamTeamServer).GetRound(ctx, req.(*GetRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamTeam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teamteampb.TeamTeam",
	HandlerType: (*TeamTeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TeamTeam_Ping_Handler,
		},
		{
			MethodName: "GetRound",
			Handler:    _TeamTeam_GetRound_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TeamTeam_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "teamteam.proto",
}

func init() { proto.RegisterFile("teamteam.proto", fileDescriptor_teamteam_c6fbd77f9329f74d) }

var fileDescriptor_teamteam_c6fbd77f9329f74d = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x13, 0x31, 0x69, 0x1d, 0xc1, 0xea, 0x22, 0xb6, 0x44, 0xc1, 0xb2, 0xa7, 0x1e, 0x64,
	0x2b, 0x0a, 0x5e, 0x3d, 0x95, 0x5e, 0x3c, 0x94, 0xd5, 0x7b, 0xd9, 0xe8, 0x5a, 0x4b, 0xb3, 0x7f,
	0xdc, 0x4c, 0xc4, 0x7c, 0x36, 0xbf, 0x9c, 0x24, 0xbb, 0x21, 0xa2, 0x1e, 0x86, 0xe4, 0xbd, 0xc7,
	0x3c, 0xf6, 0x37, 0x70, 0x84, 0x52, 0xa8, 0x66, 0x98, 0x75, 0x06, 0x0d, 0x81, 0x4e, 0xdb, 0x3c,
	0xbb, 0xda, 0x6c, 0xf1, 0xad, 0xca, 0xd9, 0xb3, 0x51, 0xf3, 0xa2, 0xd2, 0x66, 0xee, 0xe4, 0x6b,
	0x21, 0x3f, 0xc3, 0xc7, 0xe6, 0xe1, 0xc7, 0x6f, 0xd2, 0x01, 0x24, 0x0b, 0x65, 0xb1, 0xa6, 0xf7,
	0x30, 0x5a, 0x4a, 0xe4, 0xa6, 0xd2, 0x2f, 0x5c, 0xbe, 0x57, 0xb2, 0x44, 0x72, 0x0a, 0x89, 0x6b,
	0xf4, 0x24, 0x9e, 0xc6, 0xb3, 0x84, 0x7b, 0x41, 0xce, 0x20, 0xb5, 0x85, 0xa8, 0xa5, 0x9b, 0xec,
	0x4d, 0xe3, 0xd9, 0x01, 0x0f, 0x8a, 0x3e, 0xc0, 0x71, 0x5f, 0x50, 0x5a, 0xa3, 0x4b, 0x49, 0x2e,
	0xe1, 0xd0, 0xa7, 0x6b, 0x27, 0xf4, 0x2e, 0xf4, 0x80, 0xb7, 0xb8, 0xd0, 0x3b, 0x32, 0x86, 0x81,
	0xaa, 0xd7, 0x56, 0x38, 0x6c, 0xdb, 0x12, 0x9e, 0xaa, 0x7a, 0x25, 0x1c, 0xde, 0x7c, 0xc5, 0x30,
	0x7c, 0x92, 0x42, 0x35, 0x43, 0x18, 0xec, 0xaf, 0xb6, 0x7a, 0x43, 0x4e, 0x58, 0xcf, 0xc9, 0xda,
	0x67, 0x67, 0x7f, 0x2d, 0x1a, 0x91, 0x3b, 0x48, 0x1f, 0xd1, 0x35, 0x9b, 0x63, 0xd6, 0x61, 0x33,
	0xef, 0x04, 0xb6, 0x6c, 0xd4, 0x07, 0x8b, 0x0f, 0xa9, 0x91, 0x46, 0xd7, 0x31, 0x59, 0xc2, 0xb0,
	0x43, 0x20, 0xe7, 0x3f, 0x8b, 0x7f, 0x5d, 0x26, 0xbb, 0xf8, 0x3f, 0xf4, 0xd4, 0x34, 0xca, 0xd3,
	0xf6, 0xb8, 0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x93, 0x8d, 0x45, 0xa8, 0x01, 0x00,
	0x00,
}
